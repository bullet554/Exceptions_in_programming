//Задача 3.
//Обработка исключений для разностных массивов
//        Реализуйте метод subArraysWithExceptionHandling, который принимает
//        два массива целых чисел. Метод должен возвращать новый массив, где
//        каждый элемент является разностью соответствующих элементов двух входных
//        массивов. Если длины массивов не равны, выбрасывайте
//        IllegalArgumentException с сообщением "Массивы разной длины". Если
//        результат разности оказывается отрицательным, выбрасывайте
//        RuntimeException с сообщением "Отрицательный результат разности".


//Подсказка № 1
//        Перед тем как выполнять какие-либо операции с массивами, проверьте их длины.
//        Используйте условие if для сравнения длины двух массивов. Если длины не равны,
//        добавьте сообщение об ошибке в список errors и верните пустой массив.
//Подсказка № 2
//        Создайте новый массив для хранения результатов разностей соответствующих
//        элементов двух входных массивов. Убедитесь, что этот массив имеет длину, равную
//        длине входных массивов.
//Подсказка № 3
//        Пройдитесь по каждому элементу входных массивов с помощью цикла for. Вычислите
//        разность соответствующих элементов и сохраните результат в новом массиве.
//Подсказка № 4
//        После вычисления разностей, пройдитесь по новому массиву и проверьте, есть ли
//        отрицательные значения. Если такое значение найдено, добавьте соответствующее
//        сообщение об ошибке в список errors.


import java.util.List;

class Answer {
    public int[] subArraysWithExceptionHandling(int[] a, int[] b, List<String> errors) {
        if (a.length != b.length) {
            errors.add("Массивы разной длины");
            return new int[0];
//      Возвращаем пустой массив, так как длины массивов не совпадают
        }
        int[] result = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            result[i] = a[i] - b[i];
            if (result[i] < 0) {
                errors.add("Отрицательный результат разности в позиции " + i + ": " + result[i]);
            }
        }
        return result;
    }
}